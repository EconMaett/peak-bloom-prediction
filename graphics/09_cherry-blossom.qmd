---
title: "Kyoto Cherry Blossom Blooms"
format: 
  html:
    theme: darkly
    code-fold: show
editor: visual
---

Original blog post: <https://jakelawlor.github.io/portfolio/30daychartchall/>.

This plot was created as a contribution to the [#30DayChartChallenge](https://x.com/30DayChartChall).

The prompt on this day was **global change**, so the author plotted the timing of peak cherry blossom bloom in Kyoto City, Japan, since 812 AD.

The `{ggforce}` R package is used to turn individual points into flowers and a trend line into a tree branch.

The code is available on the GitHub repository <https://github.com/jakelawlor/30_day_chart_challenge/tree/main/day_19>.

## Load packages

Clear your workspace, load all the necessary packages, and define some parameters that will be useful later on.

```{r}
#| label: load-pkgs
#| output: false

rm(list = ls(all.names = TRUE))

library(tidyverse)
library(ggforce)
library(showtext)
library(extrafont)
library(ggtext)

# Automatically use showtext for new devices
showtext_auto()

# Register the Google Font "M PLUS 1p"
font_add_google("Dancing Script")
```

## Load data

The original author makes the data available in CSV format <http://atmenv.envi.osakafu-u.ac.jp/aono/kyophenotemp4/>.

## Load data

Load the data

```{r}
#| label: load-data

data <- read_rds(file = "data/kyoto.rds") %>% 
  select(ad, full_flowering_date, full_flowering_date_doy) %>% 
  setNames(nm = c("a_d", "date", "day"))

head(data)
```

Make a first plot of the data

```{r}
#| label: first-plot
#| warning: false

first_plot <- ggplot(data = data, mapping = aes(x = a_d, y = day)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y ~ x")

print(first_plot)
```

Create a cherry blossom plot

```{r}
#| label: cherry-blossom-plot
#| warning: false

df <- data.frame(x = c(1, 1), y = c(1, 3), year = c(1, 2)) %>% 
  slice(rep(1:n(), each = 5)) %>%
  mutate(flower = rep_len(1:5, length.out = n())) %>%
  # make two anchors for each flower pedal
  mutate(
    anchor_x = x + c(-0.25, 0.8, 0.7, -0.7, -0.8),
    anchor_y = y + c(0.9, 0.5, -0.4, -0.4, 0.55)
  ) %>%
  mutate(
    anchor_x2 = x + c(0.25, 0.9, 0.3, -0.3, -0.9),
    anchor_y2 = y + c(0.9, 0.2, -0.6, -0.6, 0.2)
  ) %>%
  pivot_longer(cols = c(x, anchor_x, anchor_x2), values_to = "xs", names_to = "x_type") %>%
  pivot_longer(cols = c(y, anchor_y, anchor_y2), values_to = "ys", names_to = "y_type") %>%
  filter(x_type == "x" & y_type == "y" |
    x_type == "anchor_x" & y_type == "anchor_y" |
    x_type == "anchor_x2" & y_type == "anchor_y2") %>%
  select(-x_type, -y_type)

cherry_plot <- ggplot(data = df) +
  # geom_shape(aes(x=xs,y=ys,group = interaction(year, flower)), expand = unit(0.5, 'mm'), radius = unit(3, 'mm')) +
  geom_bspline_closed(aes(x = xs, y = ys, group = interaction(year, flower), fill = ys),
    color = "pink", fill = "pink",
    expand = unit(6, "mm"), radius = unit(5, "mm")
  ) +
  coord_equal(clip = "off") +
  theme_minimal() +
  labs(x = NULL, y = NULL)

print(cherry_plot)
```

Make points to draw a tree trunk.

The author traced the long branch over a geom_smooth of the real data.

```{r}
#| label: tree-trunk-points
#| warning: false

trunk <- tribble(
  ~x, ~y, ~color,
  650, 51, "blue",
  795, 51, "blue",
  798, 51, "blue",
  800, 51, "blue",
  830, 51, "blue",
  812, 62, "blue",
  794, 70, "blue",
  782, 77, "blue",
  775, 85, "blue",
  782, 92, "blue",
  788, 95, "blue",
  798, 97, "blue",
  805, 98, "blue",
  # follow branch to right (this branch traces geom_smooth trend line)
  825, 100, "green",
  1000, 102.5, "green",
  1125, 103.5, "green",
  1250, 103.5, "green",
  1375, 103, "green",
  1500, 104, "green",
  1625, 105, "green",
  1685, 105.5, "green",
  1750, 105.5, "green",
  1875, 104, "green",
  2000, 96.5, "green",
  2035, 95.5, "green", # branch tip
  # back up the branch right to left - back along trend line
  2000, 99.5, "green",
  1875, 105, "green",
  1750, 107.5, "green",
  1685, 107, "green",
  1625, 106.5, "green",
  1500, 105, "green",
  1375, 105, "green",
  1250, 105, "green",
  1125, 105, "green",
  1000, 104.5, "green",
  875, 104.5, "green",

  # corner
  788, 103.5, "blue",
  788, 103, "blue",
  790, 107, "blue",
  800, 110, "blue",
  # second branch  'blue'
  #  802,   114,  'blue'
  810, 117, "blue",
  900, 118, "blue",
  950, 120, "blue",
  1100, 124, "blue",
  1300, 130, "blue",
  # end of branch  (off screen)
  1300, 131, "blue",
  1300, 131, "blue",
  1080, 125.5, "blue",
  1000, 123, "blue",
  900, 121, "blue",
  800, 119, "blue",
  802, 120, "blue",
  #  825,   130,  'blue',
  # top border
  750, 130, "blue",
  700, 130, "blue",
  680, 130, "blue",
  765, 117, "blue",
  760, 110, "blue",

  # 800,   130,  'blue',
  # 650,   130,  'blue',
  # 745,   130,  'blue',
  # 710,   130,  'blue',
  660, 97, "blue",
)
```

Create the full plot

```{r}
#| label: full-plot
#| warning: false

full_plot <- data %>%
  # repeat each year 5 times
  slice(rep(1:n(), each = 5)) %>%
  # add column for individual pedals
  mutate(pedal = rep_len(1:5, length.out = n())) %>%
  # rename
  mutate(year = a_d) %>%
  # make two anchors for each flower pedal - expand center point outwards so they form a triangle
  mutate(
    anchor_x = a_d + (c(-0.25, 0.8, 0.7, -0.7, -0.8) * 10),
    anchor_y = day + c(0.9, 0.5, -0.4, -0.4, 0.55)
  ) %>%
  mutate(
    anchor_x2 = a_d + (c(0.25, 0.9, 0.3, -0.3, -0.9) * 10),
    anchor_y2 = day + c(0.9, 0.2, -0.6, -0.6, 0.2)
  ) %>%
  # pivot to move anchor points - probably a bad way to do this, but functional.
  pivot_longer(cols = c(a_d, anchor_x, anchor_x2), values_to = "xs", names_to = "x_type") %>%
  pivot_longer(cols = c(day, anchor_y, anchor_y2), values_to = "ys", names_to = "y_type") %>%
  filter(x_type == "a_d" & y_type == "day" |
    x_type == "anchor_x" & y_type == "anchor_y" |
    x_type == "anchor_x2" & y_type == "anchor_y2") %>%
  select(-x_type, -y_type) %>%
  # start plot -------------------
  ggplot() +

  # draw tree trunk
  geom_bspline_closed(
    data = trunk, aes(x = x, y = y),
    n = 500, alpha = 1
  ) +
  # add points for tree trunk (using when creating the tibble)
  # geom_point(data = trunk, aes(x=x,y=y,color=color))+
  # add smooth to trace tree trunk over
  # geom_smooth(data = . %>% group_by(year) %>% slice(1),
  #             aes(x=xs,y=ys), formula = "y~x", method = "loess",
  #             color="grey20", fill="green",alpha=0.3) +

  # draw flowers -------------------
  # draw flower pedals
  geom_bspline_closed(aes(x = xs, y = ys, group = interaction(year, pedal), fill = ys),
    color = "grey20", fill = "#f7e6ed",
    size = 0.12,
    expand = unit(0.5, "mm"), radius = unit(0.1, "mm")
  ) +
  # draw flower centers
  geom_point(
    data = . %>% group_by(year) %>% slice(1),
    aes(x = xs, y = ys), color = "grey20", shape = 8, stroke = 0.45, size = 0.4
  ) +
  geom_point(
    data = . %>% group_by(year) %>% slice(1),
    aes(x = xs, y = ys), color = "#a84878", shape = 8, stroke = 0.25, size = 0.4
  ) +

  # add years timeline -----------------------------
  annotate(
    geom = "segment",
    x = 800, y = 84.5,
    xend = 2000, yend = 84.5,
    color = "grey30",
    size = 0.5,
    lineend = "round"
  ) +
  # add individual year ticks
  geom_segment(
    data = data.frame(
      x = c(800, 1000, 1200, 1400, 1600, 1800, 2000),
      y = 83.75,
      xend = c(800, 1000, 1200, 1400, 1600, 1800, 2000),
      yend = 84.5
    ),
    aes(x = x, y = y, xend = xend, yend = yend),
    color = "grey30", size = 0.45, lineend = "round"
  ) +
  # add individual year labels
  geom_text(
    data = data.frame(
      x = c(800, 1000, 1200, 1400, 1600, 1800, 2000),
      y = 84
    ),
    aes(x = x, y = y, label = paste(x, "AD")),
    nudge_y = -1, color = "grey30", size = 2.2,
    family = "Dancing Script"
  ) +

  # add dates boxes timeline  --------------------------
  annotate(
    geom = "rect", # feb
    xmin = 2050, xmax = 2075,
    ymin = 32, ymax = 59,
    color = "#D8AEDD", fill = "#D8AEDD", alpha = 0.75
  ) +
  annotate(
    geom = "rect", # march
    xmin = 2050, xmax = 2075,
    ymin = 60, ymax = 90,
    color = "#C39EDD", fill = "#C39EDD", alpha = 0.75
  ) +
  annotate(
    geom = "rect", # april
    xmin = 2050, xmax = 2075,
    ymin = 91, ymax = 120,
    color = "#C781BD", fill = "#C781BD", alpha = 0.75
  ) +
  annotate(
    geom = "rect", # may
    xmin = 2050, xmax = 2075,
    ymin = 121, ymax = 151,
    color = "#D889A4", fill = "#D889A4", alpha = 0.75
  ) +

  # label months
  annotate(
    geom = "text",
    angle = -90,
    x = 2063,
    y = 75,
    label = "March",
    vjust = 0.5,
    family = "Dancing Script",
    color = "grey20"
  ) +
  annotate(
    geom = "text",
    angle = -90,
    x = 2063,
    y = 105.5,
    label = "April",
    vjust = 0.5,
    family = "Dancing Script",
    color = "grey20"
  ) +

  # add text ---------------------------
  annotate(
    geom = "text",
    x = 825,
    y = 80,
    label = "Seasons are Changing",
    vjust = 1,
    hjust = 0,
    size = 24,
    family = "Dancing Script",
    color = "grey20"
  ) +
  geom_richtext(
    data = data.frame(
      x = 820, y = 69,
      label = "long-term trend in <span style = 'color:#a84878'>peak bloom date</span> of cherry blossom trees in Kyoto City,, years 801-2021 AD"
    ),
    aes(x = x, y = y, label = label),
    vjust = 1, hjust = 0,
    fill = NA, label.color = NA,
    family = "Dancing Script",
    size = 6,
    color = "grey25"
  ) +

  # theme stuff
  ggthemes::theme_few() +
  coord_cartesian(
    ylim = c(55, 128),
    xlim = c(726, 2090),
    # clip="off",
    expand = F
  ) +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    plot.margin = margin(20, 20, 20, 20, "pt"),
    axis.title = element_blank(),
    axis.ticks.length = unit(0, "pt"),
    panel.background = element_rect(fill = "#daeaf5", colour = "black", linewidth = 2)
  ) +

  # add extra rectangle on top bc text boxes overlap panel background
  annotate(
    geom = "rect",
    ymin = 55, ymax = 128,
    xmin = 726, xmax = 2090,
    colour = "black", size = 2, fill = "transparent"
  )

# View plot
print(full_plot)
```

Save the plot

```{r}
#| label: save-plot
#| output: false

ggsave(full_plot,
  filename = "figures/kyotoplot.png",
  dpi = 350,
  width = 12,
  height = 7,
  units = "cm"
)
```
