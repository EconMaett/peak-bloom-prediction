---
title: "python-cherry-blossom"
format: 
  html:
    theme: darkly
    code-fold: show
editor: source
jupyter: python3
---

Original Python file on GitHub: <https://github.com/tifa365/CherryBlossomTimeSeries/blob/main/cherry_blossom_lollypop_plot_python.py>.

This script recreates Robin Rohwer's captivating cherry blossom plot using the [plotnine](https://plotnine.org/) library, the Python equivalent to R's `{ggplot2}` package.

## Load libraries

Import the required libraries.

```{python}
#| label: import-libraries
#| output: false

import pandas as pd
from plotnine import *
from plotnine.data import *
```

## Read the data

```{python}
#| label: read-data
#| output: false

# Read the data file
cherry = pd.read_excel("data/KyotoFullFlowerW.xls", skiprows = 15, usecols = "A:E", names = ["year", "yday", "anomaly", "city", "reference"])

# Filter our rows with NA values in the Full-flowering date (DOY) column
cherry = cherry[~cherry["yday"].isna()]

# Filter out rows with NA values in the year column
cherry = cherry[~cherry["year"].isna()]

# Convert yday and year to integers
cherry["yday"] = cherry["yday"].astype(int)
cherry["year"] = cherry["year"].astype(int)

# Calculate y-axis tick positions and labels
y_dates = pd.to_datetime(["3-20", "4-1", "4-10", "4-20", "5-1", "5-10"], format = "%m-%d")
y_ticks = y_dates.dayofyear
y_lab = y_dates.strftime("%b %d")
```

## Plot the data

Create the plot

```{python}
#| label: plot-data
#| warning: false

p = ggplot(cherry, aes(x = "year", y = "yday")) + \
      theme_bw() + \
      theme(
        panel_grid = element_blank(),
        axis_text = element_text(size = 10), # smaller X and Y axis labels
        axis_title = element_text(size = 14),
        panel_background = element_rect(fill = "#E0D5C4"),
        plot_background = element_rect(fill = "#E0D5C4"),
        legend_background = element_rect(fill = "#E0D5C4")
      ) + \
      ggtitle("Full-flowering Date of Cherry Blossoms in Kyoto, Japan") + \
      geom_line() + \
      geom_smooth(color = "black") + \
      scale_y_continuous(breaks = y_ticks, labels = y_lab) + \
      scale_x_continuous(breaks = [812, 1000, 1250, 1500, 1750, 2000], expand = (0.01, 0)) + \
      labs(x = "Year", y = "Full-flowering date (DOY)") + \
      theme(figure_size = (8, 4))

# Print the plot
p.show()
```

## Save plot

Save the plot to a high-resolution file

```{python}
#| label: save-plot
#| output: false

# ggsave(plot = p, filename = "figures/12_cherry-blossom.png", dpi = 350)
p.save(filename = "figures/12_cherry-blossom.png", height = 7, width = 12, units = "cm", dpi = 350)
```
